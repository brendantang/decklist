#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'pp'

class String
  def is_integer?
     /\A[-+]?\d+\z/ === self
  end
end

class Decklist
  attr_accessor :cards
  def initialize(decklist_string)
    @string = decklist_string
    @cards = [] 
    @mainboard = []
    @sideboard = []
    parse_string
    get_card_data 
    parse_types
    separate_boards
    sort(@mainboard)
    sort(@sideboard)
  end

  def parse_string
    board = "main"
    @string.squeeze("\n").each_line do |line|
      if line.chomp.downcase == "mainboard"
        board = "main"
      elsif line.chomp.downcase == "sideboard"
        board = "side"
      else
        card_hash = {}
        if line[0].is_integer?
          card_hash["quantity"] = line[0].to_i
        else
          card_hash["quantity"] = 1
        end
        card_hash["name"] = line[2..-1].chomp
        card_hash["board"] = board 
        @cards << card_hash
      end
    end
  end

  def get_card_data
    identifiers_array = []
    @cards.each do |card|
      identifiers_array << {"name" => card["name"]}
    end
    
    query_hash = {"identifiers" => identifiers_array}
    
    json_headers = {"Content-Type" => "application/json", "Accept" => "application/json"}
    uri = URI.parse("https://api.scryfall.com/cards/collection")
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    response = http.post(uri.path, query_hash.to_json, json_headers)
    response_hash = JSON.parse(response.body)
    # add card data to @cards:
    @cards.each_with_index do |card, index|
      @cards[index] = card.merge(response_hash["data"][index]) if response_hash["data"][index]
    end 
  end

  def parse_types
    @cards.each do |card|
      type_line = card["type_line"].downcase
      card["type"] = ""
      card["type"] = if type_line.include? "creature"
                      "creature"
                     elsif type_line.include? "land"
                       "land"
                     elsif type_line.include? "instant"
                       "instant"
                     elsif type_line.include? "sorcery"
                       "sorcery"
                     elsif type_line.include? "planeswalker"
                      "planeswalker"
                     elsif type_line.include? "enchantment"
                      "enchantment"
                     elsif type_line.include? "artifact"
                       "artifact"
                     end
    end
  end

  def separate_boards  
    @cards.each do |card|
      if card["board"] == "main"
        @mainboard << card
      elsif card["board"] == "side"
        @sideboard << card
      end
    end #TODO: more concise
  end

  def sort(cards)
    cards.sort_by! {|card| [card["type"], card["cmc"]]}
  end

  def display
    puts "\n\nMainboard:\n\n"
    @mainboard.each do |card|
      print_pretty(card)
    end
    puts "\n\nSideboard:\n\n"
    @sideboard.each do |card|
      print_pretty(card)
    end

    count_types
    total_price
  end

  def print_pretty(card)
    printf("%-5d %-35s %-15s %-15s $%.2f\n", card["quantity"], card["name"], card["mana_cost"], card["type"], card["usd"] || 0)
  end

  def count_types
    card_types = {
      "land" => 0,
      "creature" => 0,
      "instant" => 0,
      "sorcery" => 0,
      "artifact" => 0,
      "enchantment" => 0
    }
    @cards.each do |card|
      card_types.each do |type, amount|
        card_types[type] += card["quantity"] if card["type_line"].downcase.include? type
      end
    end
    puts "\n"
    card_types.each do |type, amount|
      print "#{type}: #{amount}  " if amount > 0
    end
    puts "\n"
  end

  def total_price
    dollars = 0
    tix = 0
    @cards.each do |card|
      dollars += card["usd"].to_f * card["quantity"]
      tix += card["tix"].to_f * card["quantity"]
    end
    printf("total cost: $%.2f, %.2f tix \n", dollars, tix)
  end
end


deck_path = ARGV
deck_string = File.read(ARGV[0])
decklist = Decklist.new(deck_string)
decklist.display
